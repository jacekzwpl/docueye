/* tslint:disable */
/* eslint-disable */
/**
 * DocuEye.Web
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { DecisionContent } from '../models';
// @ts-ignore
import { FoundedDecision } from '../models';
/**
 * DecisionsApi - axios parameter creator
 * @export
 */
export const DecisionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} elementId 
         * @param {number} [limit] 
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdDecisionsElementElementIdGet: async (workspaceId: string, elementId: string, limit?: number, skip?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdDecisionsElementElementIdGet', 'workspaceId', workspaceId)
            // verify required parameter 'elementId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdDecisionsElementElementIdGet', 'elementId', elementId)
            const localVarPath = `/api/workspaces/{workspaceId}/decisions/element/{elementId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"elementId"}}`, encodeURIComponent(String(elementId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {string} [baseUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdDecisionsIdGet: async (workspaceId: string, id: string, baseUrl?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdDecisionsIdGet', 'workspaceId', workspaceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdDecisionsIdGet', 'id', id)
            const localVarPath = `/api/workspaces/{workspaceId}/decisions/{id}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (baseUrl !== undefined) {
                localVarQueryParameter['baseUrl'] = baseUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {number} [limit] 
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdDecisionsWorkspaceGet: async (workspaceId: string, limit?: number, skip?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdDecisionsWorkspaceGet', 'workspaceId', workspaceId)
            const localVarPath = `/api/workspaces/{workspaceId}/decisions/workspace`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DecisionsApi - functional programming interface
 * @export
 */
export const DecisionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DecisionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} elementId 
         * @param {number} [limit] 
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdDecisionsElementElementIdGet(workspaceId: string, elementId: string, limit?: number, skip?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoundedDecision>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdDecisionsElementElementIdGet(workspaceId, elementId, limit, skip, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DecisionsApi.apiWorkspacesWorkspaceIdDecisionsElementElementIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {string} [baseUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdDecisionsIdGet(workspaceId: string, id: string, baseUrl?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DecisionContent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdDecisionsIdGet(workspaceId, id, baseUrl, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DecisionsApi.apiWorkspacesWorkspaceIdDecisionsIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {number} [limit] 
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdDecisionsWorkspaceGet(workspaceId: string, limit?: number, skip?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoundedDecision>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdDecisionsWorkspaceGet(workspaceId, limit, skip, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DecisionsApi.apiWorkspacesWorkspaceIdDecisionsWorkspaceGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DecisionsApi - factory interface
 * @export
 */
export const DecisionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DecisionsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} elementId 
         * @param {number} [limit] 
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdDecisionsElementElementIdGet(workspaceId: string, elementId: string, limit?: number, skip?: number, options?: any): AxiosPromise<Array<FoundedDecision>> {
            return localVarFp.apiWorkspacesWorkspaceIdDecisionsElementElementIdGet(workspaceId, elementId, limit, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {string} [baseUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdDecisionsIdGet(workspaceId: string, id: string, baseUrl?: string, options?: any): AxiosPromise<DecisionContent> {
            return localVarFp.apiWorkspacesWorkspaceIdDecisionsIdGet(workspaceId, id, baseUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {number} [limit] 
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdDecisionsWorkspaceGet(workspaceId: string, limit?: number, skip?: number, options?: any): AxiosPromise<Array<FoundedDecision>> {
            return localVarFp.apiWorkspacesWorkspaceIdDecisionsWorkspaceGet(workspaceId, limit, skip, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DecisionsApi - object-oriented interface
 * @export
 * @class DecisionsApi
 * @extends {BaseAPI}
 */
export class DecisionsApi extends BaseAPI {
    /**
     * 
     * @param {string} workspaceId 
     * @param {string} elementId 
     * @param {number} [limit] 
     * @param {number} [skip] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionsApi
     */
    public apiWorkspacesWorkspaceIdDecisionsElementElementIdGet(workspaceId: string, elementId: string, limit?: number, skip?: number, options?: RawAxiosRequestConfig) {
        return DecisionsApiFp(this.configuration).apiWorkspacesWorkspaceIdDecisionsElementElementIdGet(workspaceId, elementId, limit, skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} workspaceId 
     * @param {string} id 
     * @param {string} [baseUrl] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionsApi
     */
    public apiWorkspacesWorkspaceIdDecisionsIdGet(workspaceId: string, id: string, baseUrl?: string, options?: RawAxiosRequestConfig) {
        return DecisionsApiFp(this.configuration).apiWorkspacesWorkspaceIdDecisionsIdGet(workspaceId, id, baseUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} workspaceId 
     * @param {number} [limit] 
     * @param {number} [skip] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionsApi
     */
    public apiWorkspacesWorkspaceIdDecisionsWorkspaceGet(workspaceId: string, limit?: number, skip?: number, options?: RawAxiosRequestConfig) {
        return DecisionsApiFp(this.configuration).apiWorkspacesWorkspaceIdDecisionsWorkspaceGet(workspaceId, limit, skip, options).then((request) => request(this.axios, this.basePath));
    }
}

