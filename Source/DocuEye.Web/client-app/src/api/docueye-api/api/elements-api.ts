/* tslint:disable */
/* eslint-disable */
/**
 * DocuEye.Web
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ChildElement } from '../models';
// @ts-ignore
import { Element } from '../models';
// @ts-ignore
import { ElementConsumer } from '../models';
// @ts-ignore
import { ElementDependence } from '../models';
// @ts-ignore
import { WorkspaceCatalogElement } from '../models';
/**
 * ElementsApi - axios parameter creator
 * @export
 */
export const ElementsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} [name] 
         * @param {string} [type] 
         * @param {number} [limit] 
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdElementsGet: async (workspaceId: string, name?: string, type?: string, limit?: number, skip?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdElementsGet', 'workspaceId', workspaceId)
            const localVarPath = `/api/workspaces/{workspaceId}/elements`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdElementsIdChildrenGet: async (workspaceId: string, id: string, type?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdElementsIdChildrenGet', 'workspaceId', workspaceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdElementsIdChildrenGet', 'id', id)
            const localVarPath = `/api/workspaces/{workspaceId}/elements/{id}/children`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {boolean} [getLinked] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdElementsIdConsumersGet: async (workspaceId: string, id: string, getLinked?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdElementsIdConsumersGet', 'workspaceId', workspaceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdElementsIdConsumersGet', 'id', id)
            const localVarPath = `/api/workspaces/{workspaceId}/elements/{id}/consumers`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (getLinked !== undefined) {
                localVarQueryParameter['getLinked'] = getLinked;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {boolean} [getLinked] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdElementsIdDependencesGet: async (workspaceId: string, id: string, getLinked?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdElementsIdDependencesGet', 'workspaceId', workspaceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdElementsIdDependencesGet', 'id', id)
            const localVarPath = `/api/workspaces/{workspaceId}/elements/{id}/dependences`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (getLinked !== undefined) {
                localVarQueryParameter['getLinked'] = getLinked;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdElementsIdGet: async (workspaceId: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdElementsIdGet', 'workspaceId', workspaceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdElementsIdGet', 'id', id)
            const localVarPath = `/api/workspaces/{workspaceId}/elements/{id}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ElementsApi - functional programming interface
 * @export
 */
export const ElementsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ElementsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} [name] 
         * @param {string} [type] 
         * @param {number} [limit] 
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdElementsGet(workspaceId: string, name?: string, type?: string, limit?: number, skip?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkspaceCatalogElement>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdElementsGet(workspaceId, name, type, limit, skip, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ElementsApi.apiWorkspacesWorkspaceIdElementsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdElementsIdChildrenGet(workspaceId: string, id: string, type?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ChildElement>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdElementsIdChildrenGet(workspaceId, id, type, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ElementsApi.apiWorkspacesWorkspaceIdElementsIdChildrenGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {boolean} [getLinked] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdElementsIdConsumersGet(workspaceId: string, id: string, getLinked?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ElementConsumer>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdElementsIdConsumersGet(workspaceId, id, getLinked, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ElementsApi.apiWorkspacesWorkspaceIdElementsIdConsumersGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {boolean} [getLinked] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdElementsIdDependencesGet(workspaceId: string, id: string, getLinked?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ElementDependence>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdElementsIdDependencesGet(workspaceId, id, getLinked, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ElementsApi.apiWorkspacesWorkspaceIdElementsIdDependencesGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdElementsIdGet(workspaceId: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Element>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdElementsIdGet(workspaceId, id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ElementsApi.apiWorkspacesWorkspaceIdElementsIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ElementsApi - factory interface
 * @export
 */
export const ElementsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ElementsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} [name] 
         * @param {string} [type] 
         * @param {number} [limit] 
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdElementsGet(workspaceId: string, name?: string, type?: string, limit?: number, skip?: number, options?: any): AxiosPromise<Array<WorkspaceCatalogElement>> {
            return localVarFp.apiWorkspacesWorkspaceIdElementsGet(workspaceId, name, type, limit, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdElementsIdChildrenGet(workspaceId: string, id: string, type?: string, options?: any): AxiosPromise<Array<ChildElement>> {
            return localVarFp.apiWorkspacesWorkspaceIdElementsIdChildrenGet(workspaceId, id, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {boolean} [getLinked] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdElementsIdConsumersGet(workspaceId: string, id: string, getLinked?: boolean, options?: any): AxiosPromise<Array<ElementConsumer>> {
            return localVarFp.apiWorkspacesWorkspaceIdElementsIdConsumersGet(workspaceId, id, getLinked, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {boolean} [getLinked] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdElementsIdDependencesGet(workspaceId: string, id: string, getLinked?: boolean, options?: any): AxiosPromise<Array<ElementDependence>> {
            return localVarFp.apiWorkspacesWorkspaceIdElementsIdDependencesGet(workspaceId, id, getLinked, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdElementsIdGet(workspaceId: string, id: string, options?: any): AxiosPromise<Element> {
            return localVarFp.apiWorkspacesWorkspaceIdElementsIdGet(workspaceId, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ElementsApi - object-oriented interface
 * @export
 * @class ElementsApi
 * @extends {BaseAPI}
 */
export class ElementsApi extends BaseAPI {
    /**
     * 
     * @param {string} workspaceId 
     * @param {string} [name] 
     * @param {string} [type] 
     * @param {number} [limit] 
     * @param {number} [skip] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementsApi
     */
    public apiWorkspacesWorkspaceIdElementsGet(workspaceId: string, name?: string, type?: string, limit?: number, skip?: number, options?: RawAxiosRequestConfig) {
        return ElementsApiFp(this.configuration).apiWorkspacesWorkspaceIdElementsGet(workspaceId, name, type, limit, skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} workspaceId 
     * @param {string} id 
     * @param {string} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementsApi
     */
    public apiWorkspacesWorkspaceIdElementsIdChildrenGet(workspaceId: string, id: string, type?: string, options?: RawAxiosRequestConfig) {
        return ElementsApiFp(this.configuration).apiWorkspacesWorkspaceIdElementsIdChildrenGet(workspaceId, id, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} workspaceId 
     * @param {string} id 
     * @param {boolean} [getLinked] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementsApi
     */
    public apiWorkspacesWorkspaceIdElementsIdConsumersGet(workspaceId: string, id: string, getLinked?: boolean, options?: RawAxiosRequestConfig) {
        return ElementsApiFp(this.configuration).apiWorkspacesWorkspaceIdElementsIdConsumersGet(workspaceId, id, getLinked, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} workspaceId 
     * @param {string} id 
     * @param {boolean} [getLinked] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementsApi
     */
    public apiWorkspacesWorkspaceIdElementsIdDependencesGet(workspaceId: string, id: string, getLinked?: boolean, options?: RawAxiosRequestConfig) {
        return ElementsApiFp(this.configuration).apiWorkspacesWorkspaceIdElementsIdDependencesGet(workspaceId, id, getLinked, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} workspaceId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementsApi
     */
    public apiWorkspacesWorkspaceIdElementsIdGet(workspaceId: string, id: string, options?: RawAxiosRequestConfig) {
        return ElementsApiFp(this.configuration).apiWorkspacesWorkspaceIdElementsIdGet(workspaceId, id, options).then((request) => request(this.axios, this.basePath));
    }
}

