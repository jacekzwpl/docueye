/* tslint:disable */
/* eslint-disable */
/**
 * DocuEye.Web
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ComponentView } from '../models';
// @ts-ignore
import { ContainerView } from '../models';
// @ts-ignore
import { DeploymentView } from '../models';
// @ts-ignore
import { DynamicView } from '../models';
// @ts-ignore
import { FilteredView } from '../models';
// @ts-ignore
import { ImageView } from '../models';
// @ts-ignore
import { SystemContextView } from '../models';
// @ts-ignore
import { SystemLandscapeView } from '../models';
// @ts-ignore
import { ViewWithElement } from '../models';
/**
 * ViewsApi - axios parameter creator
 * @export
 */
export const ViewsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} elementId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdViewsByelementElementIdGet: async (workspaceId: string, elementId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdViewsByelementElementIdGet', 'workspaceId', workspaceId)
            // verify required parameter 'elementId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdViewsByelementElementIdGet', 'elementId', elementId)
            const localVarPath = `/api/workspaces/{workspaceId}/views/byelement/{elementId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"elementId"}}`, encodeURIComponent(String(elementId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdViewsComponentIdGet: async (workspaceId: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdViewsComponentIdGet', 'workspaceId', workspaceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdViewsComponentIdGet', 'id', id)
            const localVarPath = `/api/workspaces/{workspaceId}/views/component/{id}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdViewsContainerIdGet: async (workspaceId: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdViewsContainerIdGet', 'workspaceId', workspaceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdViewsContainerIdGet', 'id', id)
            const localVarPath = `/api/workspaces/{workspaceId}/views/container/{id}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdViewsDeploymentIdGet: async (workspaceId: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdViewsDeploymentIdGet', 'workspaceId', workspaceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdViewsDeploymentIdGet', 'id', id)
            const localVarPath = `/api/workspaces/{workspaceId}/views/deployment/{id}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdViewsDynamicIdGet: async (workspaceId: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdViewsDynamicIdGet', 'workspaceId', workspaceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdViewsDynamicIdGet', 'id', id)
            const localVarPath = `/api/workspaces/{workspaceId}/views/dynamic/{id}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdViewsFilteredIdGet: async (workspaceId: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdViewsFilteredIdGet', 'workspaceId', workspaceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdViewsFilteredIdGet', 'id', id)
            const localVarPath = `/api/workspaces/{workspaceId}/views/filtered/{id}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdViewsImageIdGet: async (workspaceId: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdViewsImageIdGet', 'workspaceId', workspaceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdViewsImageIdGet', 'id', id)
            const localVarPath = `/api/workspaces/{workspaceId}/views/image/{id}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdViewsSystemcontextIdGet: async (workspaceId: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdViewsSystemcontextIdGet', 'workspaceId', workspaceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdViewsSystemcontextIdGet', 'id', id)
            const localVarPath = `/api/workspaces/{workspaceId}/views/systemcontext/{id}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdViewsSystemlandscapeIdGet: async (workspaceId: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdViewsSystemlandscapeIdGet', 'workspaceId', workspaceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiWorkspacesWorkspaceIdViewsSystemlandscapeIdGet', 'id', id)
            const localVarPath = `/api/workspaces/{workspaceId}/views/systemlandscape/{id}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ViewsApi - functional programming interface
 * @export
 */
export const ViewsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ViewsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} elementId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdViewsByelementElementIdGet(workspaceId: string, elementId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ViewWithElement>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdViewsByelementElementIdGet(workspaceId, elementId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ViewsApi.apiWorkspacesWorkspaceIdViewsByelementElementIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdViewsComponentIdGet(workspaceId: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComponentView>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdViewsComponentIdGet(workspaceId, id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ViewsApi.apiWorkspacesWorkspaceIdViewsComponentIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdViewsContainerIdGet(workspaceId: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerView>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdViewsContainerIdGet(workspaceId, id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ViewsApi.apiWorkspacesWorkspaceIdViewsContainerIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdViewsDeploymentIdGet(workspaceId: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeploymentView>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdViewsDeploymentIdGet(workspaceId, id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ViewsApi.apiWorkspacesWorkspaceIdViewsDeploymentIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdViewsDynamicIdGet(workspaceId: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DynamicView>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdViewsDynamicIdGet(workspaceId, id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ViewsApi.apiWorkspacesWorkspaceIdViewsDynamicIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdViewsFilteredIdGet(workspaceId: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilteredView>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdViewsFilteredIdGet(workspaceId, id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ViewsApi.apiWorkspacesWorkspaceIdViewsFilteredIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdViewsImageIdGet(workspaceId: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageView>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdViewsImageIdGet(workspaceId, id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ViewsApi.apiWorkspacesWorkspaceIdViewsImageIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdViewsSystemcontextIdGet(workspaceId: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemContextView>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdViewsSystemcontextIdGet(workspaceId, id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ViewsApi.apiWorkspacesWorkspaceIdViewsSystemcontextIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWorkspacesWorkspaceIdViewsSystemlandscapeIdGet(workspaceId: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemLandscapeView>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWorkspacesWorkspaceIdViewsSystemlandscapeIdGet(workspaceId, id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ViewsApi.apiWorkspacesWorkspaceIdViewsSystemlandscapeIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ViewsApi - factory interface
 * @export
 */
export const ViewsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ViewsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} elementId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdViewsByelementElementIdGet(workspaceId: string, elementId: string, options?: any): AxiosPromise<Array<ViewWithElement>> {
            return localVarFp.apiWorkspacesWorkspaceIdViewsByelementElementIdGet(workspaceId, elementId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdViewsComponentIdGet(workspaceId: string, id: string, options?: any): AxiosPromise<ComponentView> {
            return localVarFp.apiWorkspacesWorkspaceIdViewsComponentIdGet(workspaceId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdViewsContainerIdGet(workspaceId: string, id: string, options?: any): AxiosPromise<ContainerView> {
            return localVarFp.apiWorkspacesWorkspaceIdViewsContainerIdGet(workspaceId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdViewsDeploymentIdGet(workspaceId: string, id: string, options?: any): AxiosPromise<DeploymentView> {
            return localVarFp.apiWorkspacesWorkspaceIdViewsDeploymentIdGet(workspaceId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdViewsDynamicIdGet(workspaceId: string, id: string, options?: any): AxiosPromise<DynamicView> {
            return localVarFp.apiWorkspacesWorkspaceIdViewsDynamicIdGet(workspaceId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdViewsFilteredIdGet(workspaceId: string, id: string, options?: any): AxiosPromise<FilteredView> {
            return localVarFp.apiWorkspacesWorkspaceIdViewsFilteredIdGet(workspaceId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdViewsImageIdGet(workspaceId: string, id: string, options?: any): AxiosPromise<ImageView> {
            return localVarFp.apiWorkspacesWorkspaceIdViewsImageIdGet(workspaceId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdViewsSystemcontextIdGet(workspaceId: string, id: string, options?: any): AxiosPromise<SystemContextView> {
            return localVarFp.apiWorkspacesWorkspaceIdViewsSystemcontextIdGet(workspaceId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkspacesWorkspaceIdViewsSystemlandscapeIdGet(workspaceId: string, id: string, options?: any): AxiosPromise<SystemLandscapeView> {
            return localVarFp.apiWorkspacesWorkspaceIdViewsSystemlandscapeIdGet(workspaceId, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ViewsApi - object-oriented interface
 * @export
 * @class ViewsApi
 * @extends {BaseAPI}
 */
export class ViewsApi extends BaseAPI {
    /**
     * 
     * @param {string} workspaceId 
     * @param {string} elementId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewsApi
     */
    public apiWorkspacesWorkspaceIdViewsByelementElementIdGet(workspaceId: string, elementId: string, options?: RawAxiosRequestConfig) {
        return ViewsApiFp(this.configuration).apiWorkspacesWorkspaceIdViewsByelementElementIdGet(workspaceId, elementId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} workspaceId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewsApi
     */
    public apiWorkspacesWorkspaceIdViewsComponentIdGet(workspaceId: string, id: string, options?: RawAxiosRequestConfig) {
        return ViewsApiFp(this.configuration).apiWorkspacesWorkspaceIdViewsComponentIdGet(workspaceId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} workspaceId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewsApi
     */
    public apiWorkspacesWorkspaceIdViewsContainerIdGet(workspaceId: string, id: string, options?: RawAxiosRequestConfig) {
        return ViewsApiFp(this.configuration).apiWorkspacesWorkspaceIdViewsContainerIdGet(workspaceId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} workspaceId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewsApi
     */
    public apiWorkspacesWorkspaceIdViewsDeploymentIdGet(workspaceId: string, id: string, options?: RawAxiosRequestConfig) {
        return ViewsApiFp(this.configuration).apiWorkspacesWorkspaceIdViewsDeploymentIdGet(workspaceId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} workspaceId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewsApi
     */
    public apiWorkspacesWorkspaceIdViewsDynamicIdGet(workspaceId: string, id: string, options?: RawAxiosRequestConfig) {
        return ViewsApiFp(this.configuration).apiWorkspacesWorkspaceIdViewsDynamicIdGet(workspaceId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} workspaceId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewsApi
     */
    public apiWorkspacesWorkspaceIdViewsFilteredIdGet(workspaceId: string, id: string, options?: RawAxiosRequestConfig) {
        return ViewsApiFp(this.configuration).apiWorkspacesWorkspaceIdViewsFilteredIdGet(workspaceId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} workspaceId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewsApi
     */
    public apiWorkspacesWorkspaceIdViewsImageIdGet(workspaceId: string, id: string, options?: RawAxiosRequestConfig) {
        return ViewsApiFp(this.configuration).apiWorkspacesWorkspaceIdViewsImageIdGet(workspaceId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} workspaceId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewsApi
     */
    public apiWorkspacesWorkspaceIdViewsSystemcontextIdGet(workspaceId: string, id: string, options?: RawAxiosRequestConfig) {
        return ViewsApiFp(this.configuration).apiWorkspacesWorkspaceIdViewsSystemcontextIdGet(workspaceId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} workspaceId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewsApi
     */
    public apiWorkspacesWorkspaceIdViewsSystemlandscapeIdGet(workspaceId: string, id: string, options?: RawAxiosRequestConfig) {
        return ViewsApiFp(this.configuration).apiWorkspacesWorkspaceIdViewsSystemlandscapeIdGet(workspaceId, id, options).then((request) => request(this.axios, this.basePath));
    }
}

